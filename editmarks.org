#+title: Scimax editmarks

Check out the video here: https://www.youtube.com/watch?v=qBmvBkpzixs

{>~ @JF Add some some references~<}

Pellentesque dapibus suscipit ligula.  Done posuere augue in quam.  {b>Etiam vel tortor<b} sodales tellus ultricies commodo.  Suspendisse potenti.  Aenean in sem ac leo mollis blandit.  Donec neque quam, dignissim in, mollis nec, sagittis eu, wisi.  Phasellus lacus.  Etiam laoreet quam sed arcu.  Phasellus at dui in ligula mollis ultricies.  {y>Integer placerat<y} tristique nisl.  Praesent augue.  Fusce commodo. {>+adding text+<} Vestibulum{>- convallis-<}, lorem a tempus semper, dui dui euismod elit, vitae placerat urna tortor vitae lacus.  Nullam libero mauris, consequat quis, varius et, dictum id, arcu. {>- Mauris mollis tincidunt felis-<}.  Aliquam feugiat tellus ut neque.  Nulla facilisis, {g>risus <g}a rhoncus fermentum, tellus tellus lacinia purus, et dictum nunc justo sit amet elit. {>+add this text here.+<}

{a> :file 2021-09-25-08-54-39.mp3 <a}

** Inserting file links
{>*figure out why file insertion doesnt work.*<}

1. In the file you want to put a link to, run M-x sem-store-file-editmark  in the place you want a link.
2. In the place you want to put the link, run M-x sem-insert-file-editmark.

{>| :file /Users/jkitchin/Dropbox/emacs/scimax/scimax-channel/2021-09-25-08-40-28.mp3|<}

The default inserter from the hydra menu does this now.


** what is wrong with spell-checking?

I have been messing with spell-check for years it seems. It has never been super great. I had an old function in the editmark code, which I have now replaced. It works for now. One day I will spend another day or so getting it better.

** What is wrong with html export?

I found a bug in the parentheses. It works better now, but the highlights don't seem to be working right yet. 

It also appears the default color conversion from rgb to hex might have changed. I fixed this and now the colors export to html (except the green one, because we didn't define an html export for it.).

** build                                                           :noexport:

#+BEGIN_SRC emacs-lisp
(assoc 'green-highlight sem-editmarks)
#+END_SRC

#+RESULTS:
| green-highlight | :open-marker | {g> | :close-marker | <g} | :marker-face | (:background Darkolivegreen1 :weight ultra-light) | :face | (:background Darkolivegreen1) | :keymap | sem-editmark-content-map | :help-echo | green highlight. Right-click, s-click or s-o for menu. | :export | (lambda (_backend) (let* ((bounds (sem-editmark-bounds)) (content-bounds (sem-content-bounds)) (fg-color (or (plist-get (get-text-property (point) 'face) :foreground) black)) (bg-color (plist-get (get-text-property (point) 'face) :background)) (fg-rgb (color-name-to-rgb fg-color)) (fg-hex (apply 'color-rgb-to-hex fg-rgb)) bg-rgb (bg-hex #ffffff)) (when bg-color (setq bg-rgb (color-name-to-rgb bg-color) bg-hex (apply 'color-rgb-to-hex bg-rgb))) (setf (buffer-substring (car bounds) (cdr bounds)) (concat (format-spec  `((99 , (or bg-color fg-color)) (114 , (if bg-color (cl-first bg-rgb) (cl-first fg-rgb))) (103 , (if bg-color (cl-second bg-rgb) (cl-second fg-rgb))) (98 , (if bg-color (cl-third bg-rgb) (cl-third fg-rgb))) (67 , (if bg-color \colorbox \textcolor)) (111 , (or bg-color fg-color)) (119 , (* 5 (length (buffer-substring-no-properties (car content-bounds) (cdr content-bounds))))))) (mapconcat (lambda (s) (format  s)) (s-split |

I rewrote this after the video to be a little more clear. It still isn't quite right on the width of the parbox, but the heuristic here works in this example.

   #+BEGIN_SRC emacs-lisp :results silent
(sem-set-editmark-parameters 'green-highlight :export (lambda (_backend)
							(let* ((bounds (sem-editmark-bounds))
							       (content-bounds (sem-content-bounds))
							       (fg-color (or (plist-get (get-text-property (point) 'face) :foreground) "black"))
							       (bg-color (plist-get (get-text-property (point) 'face) :background))
							       (fg-rgb (color-name-to-rgb fg-color))
							       (fg-hex (apply 'color-rgb-to-hex fg-rgb))
							       bg-rgb
							       ;; this is white
							       (bg-hex "#ffffff"))
							  (when bg-color
							    (setq bg-rgb (color-name-to-rgb bg-color)
								  bg-hex (apply 'color-rgb-to-hex bg-rgb)))
							  (setf (buffer-substring (car bounds) (cdr bounds))
								(concat
								 ;; This is all one line
								 (format-spec "@@latex:\\definecolor{%c}{rgb}{%r,%g,%b}%C{%o}{\\parbox{%w}{@@"
									      `((?c . ,(or bg-color fg-color))
										(?r . ,(if bg-color (cl-first bg-rgb) (cl-first fg-rgb)))
										(?g . ,(if bg-color (cl-second bg-rgb) (cl-second fg-rgb)))
										(?b . ,(if bg-color (cl-third bg-rgb) (cl-third fg-rgb)))
										(?C . ,(if bg-color
											   "\\colorbox"
											 "\\textcolor"))
										(?o . ,(or bg-color fg-color))
										(?w . ,(* 4 (length (buffer-substring-no-properties
												(car content-bounds)
												(cdr content-bounds)))))))
								 ;; The content may be multiple lines, so we split and wrap each line here.
								 (mapconcat
								  (lambda (s)
								    (format "@@latex:%s@@" s))
								  (s-split "\n" (buffer-substring-no-properties
										 (car content-bounds)
										 (cdr content-bounds)))
								  "\n")
								 ;; Finally, we have to add on the closing }} from the opening line.
								 "@@latex:}}@@"))))))
#+END_SRC



# Local Variables:
# eval: (sem-mode)
# End:
