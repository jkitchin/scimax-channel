

#+BEGIN_SRC emacs-lisp
(get-qr-code "https://github.com/jkitchin/scimax" "scimax-qr-code.png")
#+END_SRC

#+RESULTS:
: [[scimax-qr-code.png]]


The scimax playlist: https://www.youtube.com/playlist?list=PL0sMmOaE_gs3E0OjExoI7vlCAVygj6S4I

* DONE iteration https://www.youtube.com/watch?v=yUnEjAPxW5A&t=19s
  CLOSED: [2021-10-02 Sat 10:29]

* DONE functions https://www.youtube.com/watch?v=t-IsXzEz7hs&list=PL0sMmOaE_gs3E0OjExoI7vlCAVygj6S4I&index=3&t=49s
  CLOSED: [2021-10-02 Sat 10:29]

* DONE Formatting strings https://www.youtube.com/watch?v=kk2W9krvNVg&list=PL0sMmOaE_gs3E0OjExoI7vlCAVygj6S4I&index=1
  CLOSED: [2021-10-02 Sat 10:29]

* DONE editmarks https://www.youtube.com/watch?v=qBmvBkpzixs
  CLOSED: [2021-10-02 Sat 10:30]

* DONE data structures https://www.youtube.com/watch?v=HyFbIWvmV0A
  CLOSED: [2021-10-02 Sat 11:57]

[[./data-structures.org]]

* TODO sequences

** Strings

#+BEGIN_SRC emacs-lisp
(seq-elt "tree" 3)
#+END_SRC

#+RESULTS:
: 101

** lists

** vectors

** the seq library

#+BEGIN_SRC emacs-lisp
(seq-map-indexed (lambda (val i) (cons i val)) '(a b c))
#+END_SRC

#+RESULTS:
: ((0 . a) (1 . b) (2 . c))


#+BEGIN_SRC emacs-lisp
(seq-reverse "abra")
#+END_SRC

#+RESULTS:
: arba

#+BEGIN_SRC emacs-lisp
(let ((a [1 2 3]))
  (aset a 0 21 )
  (aref a 0))
#+END_SRC

#+RESULTS:
: 21




* TODO org-db

* TODO scimax-journal
* TODO scimax-notebook

[[././screenshots/2021-10-08:16:23:20.png]]
[[./../scimax-notebook.org]]


* sort

* emacs-keybinding-command-tooltip-mode
[[nb:scimax::emacs-keybinding-command-tooltip-mode.el::c98]]

 `puthash'         

  \\[puthash]       

    `puthash'      

elisp:emacs-keybinding-command-tooltip-mode                

#+BEGIN_SRC emacs-lisp
flyspell-generic-check-word-predicate
#+END_SRC

#+RESULTS:
: org-mode-flyspell-verify

"Function providing per-mode customization over which words are flyspelled.
Returns t to continue checking, nil otherwise.
Flyspell mode sets this variable to whatever is the `flyspell-mode-predicate'
property of the major mode name."

https://emacs.stackexchange.com/questions/20230/how-to-make-flyspell-ignore-code-blocks-in-markdown

https://emacs.stackexchange.com/questions/5415/how-can-i-make-flyspell-ignore-urls

#+BEGIN_SRC emacs-lisp
(defun scimax-flyspell-verify ()
  (let ((omv (org-mode-flyspell-verify))
	(ekb (get-text-property (- (point) 2) 'emacs-keybinding-command))) 
    ;(message "%s ekb %s omv %s" (save-excursion (backward-word) (thing-at-point 'word)) ekb omv)
    (not ekb)))

(setq flyspell-generic-check-word-predicate #'scimax-flyspell-verify)
(put 'org-mode 'flyspell-mode-predicate  #'scimax-flyspell-verify)
#+END_SRC

#+RESULTS:
: scimax-flyspell-verify
#+BEGIN_SRC emacs-lisp
(get 'org-mode 'flyspell-mode-predicate )
#+END_SRC

#+RESULTS:
: scimax-flyspell-verify

wrod 

* spell-checking in scimax

#+attr_org: :width 300
[[././screenshots/2021-10-08:16:25:42.png]]
Nobody likes typos. But who wants to slow down when typing?

Every editor should have a good spellchecker. 

My setup:

C-; to correct the previous typo
C-M-; to jump to and correct a typo
s-M-; to get the hydra spell-checking hydra

For typos I get tired of making, I can save the correction as an abbreviation. 

An example is the. I misspell that a lot. the quick brown fox. 

[[./../scimax-spellcheck.el]]  a bad word 


* DONE let it be
CLOSED: [2021-10-08 Fri 15:59]

#+attr_org: :width 300
[[././screenshots/2021-10-04:17:20:44.png]]
#+BEGIN_SRC emacs-lisp
(setq z 1
      y 2)

(+ y z)
#+END_SRC

#+RESULTS:
: 3

#+BEGIN_SRC emacs-lisp
y
#+END_SRC

#+RESULTS:
: 2

#+BEGIN_SRC emacs-lisp
(let ((a 1)
      (b 2))
  (+ a b))
#+END_SRC

#+RESULTS:
: 3

#+BEGIN_SRC emacs-lisp
(let ((z 4))
  (+ y z))
#+END_SRC

#+RESULTS:
: 6

#+BEGIN_SRC emacs-lisp
(let* ((a 1)
       (b (* 2 a)))
  (+ a b))
#+END_SRC

#+RESULTS:
: 3

#+BEGIN_SRC emacs-lisp
(let-alist '((a . 1)
	     (b . 2))
  (+ .a .b))
#+END_SRC

#+RESULTS:
: 3

#+BEGIN_SRC emacs-lisp
(seq-let (a b) '(1 2) (+ a b))
#+END_SRC

#+RESULTS:
: 3

#+BEGIN_SRC emacs-lisp
(pcase-let ((`(,a ,b)  '(1 2)))
  (+ a b))
#+END_SRC

#+RESULTS:
: 3

#+BEGIN_SRC emacs-lisp
b
#+END_SRC

#+BEGIN_SRC emacs-lisp
(let (a b)
  (setq a 1
	b 2)
  (+ a b))
  
#+END_SRC

#+RESULTS:
: 3
#+BEGIN_SRC emacs-lisp
a
#+END_SRC


* DONE elfeed
CLOSED: [2021-10-08 Fri 15:59]


https://github.com/skeeto/elfeed
#+BEGIN_SRC emacs-lisp
(elfeed-db-size)
#+END_SRC

#+RESULTS:
: 71802


#+BEGIN_SRC emacs-lisp
(elfeed-search--count-unread)
#+END_SRC

#+RESULTS:
: 0/0:0

https://kitchingroup.cheme.cmu.edu/blog/2017/01/05/Scoring-elfeed-articles/


* DONE words
CLOSED: [2021-10-10 Sun 11:58]
#+attr_org: :width 300
[[././screenshots/2021-10-09:09:40:57.png]]
In writing we use words all the time. Sometimes we need help understanding the words, finding better words, etc. In scimax, =words.el= provides a lot of tools for this.

#+BEGIN_SRC emacs-lisp
(use-package words
  :load-path scimax-dir  ;; scimax-dir is a variable in scimax
  :bind ("H-w" . words-hydra/body))
#+END_SRC

#+RESULTS:
: words-hydra/body

- onomatopoeia
  - dictionary

- reveal
  - thesaurus

- grammar (See https://caderek.github.io/gramma)

Hiw many mistakes can I fit in one phraze?

LanguageTool is your intelligent writing assistant for all common browsers and word processors. Write or paste your text here too have it checked continuously. Errors will be underlined in different colours: we will mark seplling errors with red underilnes. Furthermore grammar error's are highlighted in yellow. LanguageTool also marks style issues in a reliable manner by underlining them in blue. did you know that you can sea synonyms by double clicking a word? Its a impressively versatile tool, e.g. if youd like to tell a colleague from over sea's about what happened at 5 PM in the afternoon on Monday, 27 May 2007.




** Searching 

- scimax kitchin
  - Google
  - Twitter
- Kitchin, J. R. (2015). Examples of effective data sharing in scientific publishing. ACS Catalysis, 5(6), 3894–3899.
  - crossref
  - bibtex

- kitchin geometry optimization
  - arxiv
  - Finder
  - swiper-all


** Speaking and translation

Examples of effective data sharing in scientific publishing.


* DONE Auto-formatting, abbreviations and snippets in scimax
CLOSED: [2021-10-10 Sun 15:55]

#+attr_org: :width 400
[[/Users/jkitchin/Dropbox/emacs/scimax/scimax-channel/screenshots/autoformat.png]]


#+BEGIN_SRC emacs-lisp
(require 'scimax-autoformat-abbrev)
#+END_SRC

** Autoformatting

elisp:scimax-autoformat-mode

- Ordinals 1^{st} 2^{nd} 3^{rd} 
- Fractions ½ ¼ 1/3 ¾ 
- transposed caps  Chip
- superscripts m^{2} n^{4} 
- sentence capitalization. Automatically get cap. 

#+BEGIN_SRC emacs-lisp
(setq  scimax-autoformat-sentence-capitalization nil)
#+END_SRC

#+RESULTS:


** Abbreviations

elisp:scimax-abbrev-mode

- Months Mar. March Jan. 
- days Mon. Tuesday 
- contractions do not are not 
- common transpositions the 
- some chemical formulas H_{2}O CH_{4} N_{2} 
- miscellaneous Abbreviations Å °C °F ™ Schrödinger 

#+BEGIN_SRC emacs-lisp
scimax-misc-abbreviations
#+END_SRC

#+RESULTS:
| degC        | °C          |
| degF        | °F          |
| ang         | Å           |
| tm          | ™           |
| norskov     | Nørskov     |
| schrodinger | Schrödinger |

** Yasnippets

elisp:ivy-Yasnippet

*** simple templates that are just text

#+BEGIN_SRC jupyter-python
import numpy as np
import matplotlib.pyplot as plt
plt.xlabel()
plt.legend()
#+END_SRC

*** Mostly text templates with some user input

#+BEGIN_SRC jupyter-python
plt.xlabel('x')
#+END_SRC

*** templates that look up choices

bibliography:~/Dropbox/emacs/bibliography/references.bib

bibliographystyle:unsrt

*** Templates that calculate things

ksr


** skeletons

A builtin templating solution is the skeleton library in Emacs. Defining a skeleton creates a command you can call with M-x.

#+BEGIN_SRC emacs-lisp
(define-skeleton memo
  "CMU memo template"
  nil
  "#+LATEX_CLASS: cmu-memo
,#+CC:
,#+DEPARTMENT: Department of Chemical Engineering
,#+FROM: John Kitchin
,#+FROMNAME: John Kitchin
,#+SIGNATURE-LINES: nil
,#+SUBJECT: "_"
,#+TO: "@"
,#+latex_header: \\usepackage{setspace}
,#+latex_header: \\doublespacing

Sincerely,\\\\
\\\\
\\\\
\\\\
John Kitchin

,* build :noexport:
[[elisp:(cmu-memo-export-to-pdf-and-open)]]
")
#+END_SRC

#+LATEX_CLASS: cmu-memo
#+CC:
#+DEPARTMENT: Department of Chemical Engineering
#+FROM: John Kitchin
#+FROMNAME: John Kitchin
#+SIGNATURE-LINES: nil
#+SUBJECT: 
#+TO: 
#+latex_header: \usepackage{setspace}
#+latex_header: \doublespacing

Sincerely,\\
\\
\\
\\
John Kitchin

* build :noexport:
[[elisp:(cmu-memo-export-to-pdf-and-open)]]

** Behind the scenes

[[./../scimax-autoformat-abbrev.el]]
